[gd_resource type="ShaderMaterial" load_steps=7 format=2]

[ext_resource path="res://assets/wave/wave.png" type="Texture" id=1]
[ext_resource path="res://assets/wave/wave2.png" type="Texture" id=2]
[ext_resource path="res://assets/wave/background.png" type="Texture" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;


uniform sampler2D bg : hint_albedo;
uniform sampler2D wave1 : hint_albedo;
uniform sampler2D wave2 : hint_albedo;
uniform sampler2D noise : hint_black_albedo;

vec2 tile(vec2 _st, float _zoom){
    _st *= _zoom;
    return fract(_st);
}

float box(vec2 _st, vec2 _size){
    _size = vec2(0.5)-_size*0.5;
    vec2 uv = smoothstep(_size,_size+vec2(1e-4),_st);
    uv *= smoothstep(_size,_size+vec2(1e-4),vec2(1.0)-_st);
    return uv.x*uv.y;
}

void fragment(){
	vec2 st = vec2(UV.x/(SCREEN_PIXEL_SIZE.y/SCREEN_PIXEL_SIZE.x),UV.y);
    vec3 color = vec3(0.0);
   st = tile(st,8.0);
	color += texture(bg,st).rgb;
	color += 0.5* texture(wave1,vec2(st.x + TIME * 0.02,st.y +0.2  + sin(TIME*1.5) * 0.06)).rgb / 0.5 * texture(noise,vec2(st.x + cos(TIME * 0.5),st.y)).rgb;
	color += 0.5* texture(wave2,vec2(st.x - TIME * 0.08,st.y)).rgb / 0.5 * texture(noise,vec2(st.x ,st.y - sin(TIME * 0.5))).rgb;
	COLOR = vec4(color,1.0);
}"

[sub_resource type="OpenSimplexNoise" id=2]
seed = 166
octaves = 9
period = 6.3
persistence = 0.0
lacunarity = 1.92

[sub_resource type="NoiseTexture" id=3]
width = 256
height = 256
seamless = true
noise = SubResource( 2 )

[resource]
shader = SubResource( 1 )
shader_param/bg = ExtResource( 3 )
shader_param/wave1 = ExtResource( 1 )
shader_param/wave2 = ExtResource( 2 )
shader_param/noise = SubResource( 3 )
